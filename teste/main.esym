D G "__PCM__" 0 56 ""5.025""
D G "__DEVICE__" 0 56 "876"
D G "__DATE__" 0 56 ""06-ago-22""
D G "__TIME__" 0 56 ""23:57:48"" "Standard Header file for the PIC16F876 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
v L "value" 2 37 "int8" `53 
f B "set_tris_a" 2 37 "void(int8 value)" `52 
v L "value" 2 38 "int8" `55 
f B "set_tris_b" 2 38 "void(int8 value)" `54 
v L "value" 2 39 "int8" `57 
f B "set_tris_c" 2 39 "void(int8 value)" `56 
f B "get_tris_a" 2 40 "int8()" `58 
f B "get_tris_b" 2 41 "int8()" `59 
f B "get_tris_c" 2 42 "int8()" `60 
v L "value" 2 43 "int8" `62 
f B "output_a" 2 43 "void(int8 value)" `61 
v L "value" 2 44 "int8" `64 
f B "output_b" 2 44 "void(int8 value)" `63 
v L "value" 2 45 "int8" `66 
f B "output_c" 2 45 "void(int8 value)" `65 
f B "input_a" 2 46 "int8()" `67 
f B "input_b" 2 47 "int8()" `68 
f B "input_c" 2 48 "int8()" `69 
f B "input_change_a" 2 49 "int8()" `70 
f B "input_change_b" 2 50 "int8()" `71 
f B "input_change_c" 2 51 "int8()" `72 
v L "pin" 2 52 "int16" `74 
f B "input" 2 52 "int8(int16 pin)" `73 
v L "pin" 2 53 "int16" `76 
f B "input_state" 2 53 "int8(int16 pin)" `75 
v L "pin" 2 54 "int16" `78 
f B "output_low" 2 54 "void(int16 pin)" `77 
v L "pin" 2 55 "int16" `80 
f B "output_high" 2 55 "void(int16 pin)" `79 
v L "pin" 2 56 "int16" `82 
f B "output_toggle" 2 56 "void(int16 pin)" `81 
v L "pin" 2 57 "int16" `84 
v L "level" 2 57 "int8" `85 
f B "output_bit" 2 57 "void(int16 pin,int8 level)" `83 
v L "pin" 2 58 "int16" `87 
f B "output_float" 2 58 "void(int16 pin)" `86 
v L "pin" 2 59 "int16" `89 
f B "output_drive" 2 59 "void(int16 pin)" `88  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 63 "40"
d G "PIN_A1" 2 64 "41"
d G "PIN_A2" 2 65 "42"
d G "PIN_A3" 2 66 "43"
d G "PIN_A4" 2 67 "44"
d G "PIN_A5" 2 68 "45"
d G "PIN_B0" 2 70 "48"
d G "PIN_B1" 2 71 "49"
d G "PIN_B2" 2 72 "50"
d G "PIN_B3" 2 73 "51"
d G "PIN_B4" 2 74 "52"
d G "PIN_B5" 2 75 "53"
d G "PIN_B6" 2 76 "54"
d G "PIN_B7" 2 77 "55"
d G "PIN_C0" 2 79 "56"
d G "PIN_C1" 2 80 "57"
d G "PIN_C2" 2 81 "58"
d G "PIN_C3" 2 82 "59"
d G "PIN_C4" 2 83 "60"
d G "PIN_C5" 2 84 "61"
d G "PIN_C6" 2 85 "62"
d G "PIN_C7" 2 86 "63"
d G "FALSE" 2 89 "0"
d G "TRUE" 2 90 "1"
d G "BYTE" 2 92 "int8"
d G "BOOLEAN" 2 93 "int1"
d G "getc" 2 95 "getch"
d G "fgetc" 2 96 "getch"
d G "getchar" 2 97 "getch"
d G "putc" 2 98 "putchar"
d G "fputc" 2 99 "putchar"
d G "fgets" 2 100 "gets"
d G "fputs" 2 101 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f B "restart_cause" 2 106 "int8()" `90 
f B "reset_cpu" 2 107 "void()" `91 
f B "sleep" 2 108 "void()" `92  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 2 110 "3"
d G "WDT_TIMEOUT" 2 111 "11"
d G "MCLR_FROM_SLEEP" 2 112 "19"
d G "MCLR_FROM_RUN" 2 113 "27"
d G "NORMAL_POWER_UP" 2 114 "25"
d G "BROWNOUT_RESTART" 2 115 "26"
c L "sleep" 2 3 5 "FUNCTION"
v L "mode" 2 122 "int8" `94 
f B "setup_timer_0" 2 122 "void(int8 mode)" `93 
v L "value" 2 123 "int8" `96 
f B "set_timer0" 2 123 "void(int8 value)" `95 
f B "get_timer0" 2 124 "int8()" `97 
v L "mode" 2 125 "int8" `99 
v L "prescaler" 2 125 "int8" `100 
f B "setup_counters" 2 125 "void(int8 mode,int8 prescaler)" `98 
v L "value" 2 126 "int8" `102 
f B "set_rtcc" 2 126 "void(int8 value)" `101 
f B "get_rtcc" 2 127 "int8()" `103  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 129 "0"
d G "T0_EXT_L_TO_H" 2 130 "32"
d G "T0_EXT_H_TO_L" 2 131 "48"
d G "T0_DIV_1" 2 133 "8"
d G "T0_DIV_2" 2 134 "0"
d G "T0_DIV_4" 2 135 "1"
d G "T0_DIV_8" 2 136 "2"
d G "T0_DIV_16" 2 137 "3"
d G "T0_DIV_32" 2 138 "4"
d G "T0_DIV_64" 2 139 "5"
d G "T0_DIV_128" 2 140 "6"
d G "T0_DIV_256" 2 141 "7"
d G "T0_8_BIT" 2 144 "0"
d G "RTCC_INTERNAL" 2 146 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 2 147 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 2 148 "48"
d G "RTCC_DIV_1" 2 149 "8"
d G "RTCC_DIV_2" 2 150 "0"
d G "RTCC_DIV_4" 2 151 "1"
d G "RTCC_DIV_8" 2 152 "2"
d G "RTCC_DIV_16" 2 153 "3"
d G "RTCC_DIV_32" 2 154 "4"
d G "RTCC_DIV_64" 2 155 "5"
d G "RTCC_DIV_128" 2 156 "6"
d G "RTCC_DIV_256" 2 157 "7"
d G "RTCC_8_BIT" 2 158 "0"
c L "get_rtcc" 2 3 8 "FUNCTION"
v L "mode" 2 169 "int16" `105 
f B "setup_wdt" 2 169 "void(int16 mode)" `104 
f B "restart_wdt" 2 170 "void()" `106  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 2 173 "8"
d G "WDT_36MS" 2 174 "9"
d G "WDT_72MS" 2 175 "10"
d G "WDT_144MS" 2 176 "11"
d G "WDT_288MS" 2 177 "12"
d G "WDT_576MS" 2 178 "13"
d G "WDT_1152MS" 2 179 "14"
d G "WDT_2304MS" 2 180 "15"
c L "restart_wdt" 2 3 3 "FUNCTION"
v L "mode" 2 186 "int16" `108 
f B "setup_timer_1" 2 186 "void(int16 mode)" `107 
f B "get_timer1" 2 187 "int16()" `109 
v L "value" 2 188 "int16" `111 
f B "set_timer1" 2 188 "void(int16 value)" `110  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 191 "0"
d G "T1_INTERNAL" 2 192 "0x85"
d G "T1_EXTERNAL" 2 193 "0x87"
d G "T1_EXTERNAL_SYNC" 2 194 "0x83"
d G "T1_CLK_OUT" 2 196 "8"
d G "T1_DIV_BY_1" 2 198 "0"
d G "T1_DIV_BY_2" 2 199 "0x10"
d G "T1_DIV_BY_4" 2 200 "0x20"
d G "T1_DIV_BY_8" 2 201 "0x30"
c L "set_timer1" 2 3 3 "FUNCTION"
v L "mode" 2 206 "int8" `113 
v L "period" 2 206 "int8" `114 
v L "postscale" 2 206 "int8" `115 
f B "setup_timer_2" 2 206 "void(int8 mode,int8 period,int8 postscale)" `112 
f B "get_timer2" 2 207 "int8()" `116 
v L "value" 2 208 "int8" `118 
f B "set_timer2" 2 208 "void(int8 value)" `117  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 210 "0"
d G "T2_DIV_BY_1" 2 211 "4"
d G "T2_DIV_BY_4" 2 212 "5"
d G "T2_DIV_BY_16" 2 213 "6"
c L "set_timer2" 2 3 4 "FUNCTION"
v L "mode" 2 219 "int32" `120 
f B "setup_ccp1" 2 219 "void(int32 mode)" `119 
v L "mode" 2 220 "int32" `122 
v L "pwm" 2 220 "int8" `123 
f G "setup_ccp1" 2 220 "void(int32 mode,int8 pwm)" `121 
v L "value" 2 221 "int16" `125 
f B "set_pwm1_duty" 2 221 "void(int16 value)" `124  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 223 "0"
d G "CCP_CAPTURE_FE" 2 224 "0x04"
d G "CCP_CAPTURE_RE" 2 225 "0x05"
d G "CCP_CAPTURE_DIV_4" 2 226 "0x06"
d G "CCP_CAPTURE_DIV_16" 2 227 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 2 228 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 229 "0x09"
d G "CCP_COMPARE_INT" 2 230 "0x0A"
d G "CCP_COMPARE_RESET_TIMER" 2 231 "0x0B"
d G "CCP_PWM" 2 232 "0x0C"
d G "CCP_PWM_PLUS_1" 2 233 "0x1c"
d G "CCP_PWM_PLUS_2" 2 234 "0x2c"
d G "CCP_PWM_PLUS_3" 2 235 "0x3c"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
v L "mode" 2 242 "int32" `130 
f B "setup_ccp2" 2 242 "void(int32 mode)" `129 
v L "mode" 2 243 "int32" `132 
v L "pwm" 2 243 "int8" `133 
f G "setup_ccp2" 2 243 "void(int32 mode,int8 pwm)" `131 
v L "value" 2 244 "int16" `135 
f B "set_pwm2_duty" 2 244 "void(int16 value)" `134 
c L "set_pwm2_duty" 2 3 3 "FUNCTION"
v L "mode" 2 251 "int32" `140 
f B "setup_spi" 2 251 "void(int32 mode)" `139 
v L "value" 2 252 "int8" `142 
f B "spi_write" 2 252 "void(int8 value)" `141 
f B "spi_read" 2 253 "int8()" `143 
v L "value" 2 254 "int8" `145 
f G "spi_read" 2 254 "int8(int8 value)" `144 
f B "spi_data_in" 2 255 "int8()" `146  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 257 "0x00"
d G "SPI_MASTER" 2 258 "0x20"
d G "SPI_SLAVE" 2 259 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 260 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 261 "0x00"
d G "SPI_CLK_DIV_4" 2 262 "0x00"
d G "SPI_CLK_DIV_16" 2 263 "0x01"
d G "SPI_CLK_DIV_64" 2 264 "0x02"
d G "SPI_CLK_T2" 2 265 "0x03"
d G "SPI_SS_DISABLED" 2 266 "0x01"
d G "SPI_XMIT_L_TO_H" 2 268 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 269 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 271 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 272 "0x8000"
d G "SPI_L_TO_H" 2 275 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 276 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 2 3 2 "FUNCTION"
v L "baud" 2 280 "int32" `148 
f B "setup_uart" 2 280 "void(int32 baud)" `147 
v L "baud" 2 281 "int32" `150 
v L "stream" 2 281 "int8" `151 
f G "setup_uart" 2 281 "void(int32 baud,int8 stream)" `149 
v L "baud" 2 282 "int32" `153 
v L "stream" 2 282 "int8" `154 
v L "clock" 2 282 "int32" `155 
f G "setup_uart" 2 282 "void(int32 baud,int8 stream,int32 clock)" `152 
v L "baud" 2 283 "int32" `157 
f B "set_uart_speed" 2 283 "void(int32 baud)" `156 
v L "baud" 2 284 "int32" `159 
v L "stream" 2 284 "int8" `160 
f G "set_uart_speed" 2 284 "void(int32 baud,int8 stream)" `158 
v L "baud" 2 285 "int32" `162 
v L "stream" 2 285 "int8" `163 
v L "clock" 2 285 "int32" `164 
f G "set_uart_speed" 2 285 "void(int32 baud,int8 stream,int32 clock)" `161  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 289 "2"
d G "UART_DATA" 2 290 "4"
c L "set_uart_speed" 2 3 4 "FUNCTION"
v L "mode" 2 297 "int16" `166 
f B "setup_adc" 2 297 "void(int16 mode)" `165 
f B "read_adc" 2 298 "int8()" `167 
v L "mode" 2 299 "int8" `169 
f G "read_adc" 2 299 "int8(int8 mode)" `168 
f G "read_adc" 2 300 "int16()" `170 
v L "mode" 2 301 "int8" `172 
f G "read_adc" 2 301 "int16(int8 mode)" `171 
f B "adc_done" 2 302 "int8()" `173  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 304 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 305 "0x100"
d G "ADC_CLOCK_DIV_8" 2 306 "0x40"
d G "ADC_CLOCK_DIV_32" 2 307 "0x80"
d G "ADC_CLOCK_INTERNAL" 2 308 "0xc0" "Internal 2-6us"
c L "adc_done" 2 3 1 "FUNCTION"
v L "setting" 2 311 "int8" `175 
f B "setup_adc_ports" 2 311 "void(int8 setting)" `174 
v L "channel" 2 312 "int8" `177 
f B "set_adc_channel" 2 312 "void(int8 channel)" `176  "Constants used in SETUP_ADC_PORTS() are:"
d G "NO_ANALOGS" 2 314 "7" "None"
d G "ALL_ANALOG" 2 315 "0" "A0 A1 A2 A3 A4"
d G "AN0_AN1_AN2_AN4_VSS_VREF" 2 316 "3" "A0 A1 A2 A4 VRefh=A3"
d G "AN0_AN1_AN3" 2 317 "4" "A0 A1 A3"
d G "AN0_AN1_VSS_VREF" 2 318 "5" "A0 A1 VRefh=A3"
d G "AN0_AN1_AN4_VREF_VREF" 2 319 "0x08" "A0 A1 A4 VRefh=A3 VRefl=A2"
d G "AN0_AN1_VREF_VREF" 2 320 "0x0D" "A0 A1 VRefh=A3 VRefl=A2"
d G "AN0" 2 321 "0x0E" "A0"
d G "AN0_VREF_VREF" 2 322 "0x0F" "A0 VRefh=A3 VRefl=A2"
d G "ANALOG_RA3_REF" 2 323 "0x1" "!old only provided for compatibility"
d G "RA0_RA1_RA3_ANALOG" 2 324 "0x4" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_REF" 2 325 "0x5" "!old only provided for compatibility"
d G "ANALOG_RA3_RA2_REF" 2 326 "0x8" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_RA2_REF" 2 327 "0xD" "!old only provided for compatibility"
d G "RA0_ANALOG" 2 328 "0xE" "!old only provided for compatibility"
d G "RA0_ANALOG_RA3_RA2_REF" 2 329 "0xF" "!old only provided for compatibility"
d G "ADC_START_AND_READ" 2 332 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 333 "1"
d G "ADC_READ_ONLY" 2 334 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
v L "x" 2 340 "sint8" `179 
f B "abs" 2 340 "sint8(sint8 x)" `178 
v L "x" 2 341 "sint16" `181 
f G "abs" 2 341 "sint16(sint16 x)" `180 
v L "x" 2 342 "sint32" `183 
f G "abs" 2 342 "sint32(sint32 x)" `182 
v L "x" 2 343 "float" `185 
f G "abs" 2 343 "float(float x)" `184 
v L "??65535" 2 344 "int8" `187 
v L "??65535" 2 344 "int8" `188 
f B "_mul" 2 344 "int16(int8 ,int8 )" `186 
v L "??65535" 2 345 "sint8" `187 
v L "??65535" 2 345 "sint8" `191 
f G "_mul" 2 345 "sint16(sint8 ,sint8 )" `189 
v L "??65535" 2 346 "int16" `187 
v L "??65535" 2 346 "int16" `194 
f G "_mul" 2 346 "int32(int16 ,int16 )" `192 
v L "??65535" 2 347 "sint16" `187 
v L "??65535" 2 347 "sint16" `197 
f G "_mul" 2 347 "sint32(sint16 ,sint16 )" `195  "Memory Manipulation Prototypes:"
v L "bank" 2 350 "int8" `199 
v L "offset" 2 350 "int8" `200 
f B "read_bank" 2 350 "int8(int8 bank,int8 offset)" `198 
v L "bank" 2 351 "int8" `202 
v L "offset" 2 351 "int8" `203 
v L "value" 2 351 "int8" `204 
f B "write_bank" 2 351 "void(int8 bank,int8 offset,int8 value)" `201 
v L "dest" 2 352 "*int8" `206 
v L "src" 2 352 "*int8" `207 
f B "strcpy" 2 352 "void(*int8 dest,*int8 src)" `205 
v L "dest" 2 353 "*int8" `209 
v L "src" 2 353 "*int8" `210 
f B "strcopy" 2 353 "void(*int8 dest,*int8 src)" `208 
v L "destination" 2 354 "*int8" `212 
v L "value" 2 354 "int8" `213 
v L "num" 2 354 "int16" `214 
f B "memset" 2 354 "void(*int8 destination,int8 value,int16 num)" `211 
v L "destination" 2 355 "*int8" `216 
v L "source" 2 355 "*int8" `217 
v L "num" 2 355 "int16" `218 
f B "memcpy" 2 355 "void(*int8 destination,*int8 source,int16 num)" `215  "String Prototypes:"
v L "cvalue" 2 358 "int8" `220 
f B "toupper" 2 358 "int8(int8 cvalue)" `219 
v L "cvalue" 2 359 "int8" `222 
f B "tolower" 2 359 "int8(int8 cvalue)" `221 
v L "string" 2 360 "*int8" `224 
v L "cstring" 2 360 "*int8" `225 
f B "sprintf" 2 360 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `223  "Data Manipulators Prototypes:"
v L "address" 2 363 "*int8" `228 
v L "bytes" 2 363 "int8" `229 
v L "value" 2 363 "int8" `230 
f B "shift_left" 2 363 "int8(*int8 address,int8 bytes,int8 value)" `227 
v L "address" 2 364 "*int8" `232 
v L "bytes" 2 364 "int8" `233 
v L "value" 2 364 "int8" `234 
f B "shift_right" 2 364 "int8(*int8 address,int8 bytes,int8 value)" `231 
v L "address" 2 365 "*int8" `236 
v L "bytes" 2 365 "int8" `237 
f B "rotate_left" 2 365 "void(*int8 address,int8 bytes)" `235 
v L "address" 2 366 "*int8" `239 
v L "bytes" 2 366 "int8" `240 
f B "rotate_right" 2 366 "void(*int8 address,int8 bytes)" `238 
v L "value" 2 367 "int8" `242 
f B "swap" 2 367 "void(int8 value)" `241 
v L "var" 2 368 "int16" `244 
v L "offset" 2 368 "int8" `245 
f B "make8" 2 368 "int8(int16 var,int8 offset)" `243 
v L "var" 2 369 "int32" `244 
v L "offset" 2 369 "int8" `248 
f G "make8" 2 369 "int8(int32 var,int8 offset)" `246 
v L "varhigh" 2 370 "int8" `250 
v L "varlow" 2 370 "int8" `251 
f B "make16" 2 370 "int16(int8 varhigh,int8 varlow)" `249 
v L "var1" 2 371 "int16" `253 
f B "make32" 2 371 "int32(int16 var1)" `252 
v L "var1" 2 372 "int16" `255 
v L "var2" 2 372 "int16" `256 
f G "make32" 2 372 "int32(int16 var1,int16 var2)" `254 
v L "var1" 2 373 "int16" `255 
v L "var2" 2 373 "int8" `259 
f G "make32" 2 373 "int32(int16 var1,int8 var2)" `257 
v L "var1" 2 374 "int16" `261 
v L "var2" 2 374 "int8" `262 
v L "var3" 2 374 "int8" `263 
f G "make32" 2 374 "int32(int16 var1,int8 var2,int8 var3)" `260 
v L "var1" 2 375 "int8" `265 
f G "make32" 2 375 "int32(int8 var1)" `264 
v L "var1" 2 376 "int8" `255 
v L "var2" 2 376 "int8" `268 
f G "make32" 2 376 "int32(int8 var1,int8 var2)" `266 
v L "var1" 2 377 "int8" `261 
v L "var2" 2 377 "int8" `262 
v L "var3" 2 377 "int8" `272 
f G "make32" 2 377 "int32(int8 var1,int8 var2,int8 var3)" `269 
v L "var1" 2 378 "int8" `274 
v L "var2" 2 378 "int8" `275 
v L "var3" 2 378 "int8" `276 
v L "var4" 2 378 "int8" `277 
f G "make32" 2 378 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `273 
v L "var1" 2 379 "int8" `255 
v L "var2" 2 379 "int16" `280 
f G "make32" 2 379 "int32(int8 var1,int16 var2)" `278 
v L "var1" 2 380 "int8" `261 
v L "var2" 2 380 "int16" `262 
v L "var3" 2 380 "int8" `284 
f G "make32" 2 380 "int32(int8 var1,int16 var2,int8 var3)" `281 
v L "var1" 2 381 "int8" `261 
v L "var2" 2 381 "int8" `262 
v L "var3" 2 381 "int16" `288 
f G "make32" 2 381 "int32(int8 var1,int8 var2,int16 var3)" `285 
v L "var" 2 382 "int8" `290 
v L "bit" 2 382 "int8" `291 
f B "bit_set" 2 382 "void(int8 var,int8 bit)" `289 
v L "var" 2 383 "int16" `290 
v L "bit" 2 383 "int8" `294 
f G "bit_set" 2 383 "void(int16 var,int8 bit)" `292 
v L "var" 2 384 "int32" `290 
v L "bit" 2 384 "int8" `297 
f G "bit_set" 2 384 "void(int32 var,int8 bit)" `295 
v L "var" 2 385 "int8" `299 
v L "bit" 2 385 "int8" `300 
f B "bit_clear" 2 385 "void(int8 var,int8 bit)" `298 
v L "var" 2 386 "int16" `299 
v L "bit" 2 386 "int8" `303 
f G "bit_clear" 2 386 "void(int16 var,int8 bit)" `301 
v L "var" 2 387 "int32" `299 
v L "bit" 2 387 "int8" `306 
f G "bit_clear" 2 387 "void(int32 var,int8 bit)" `304 
v L "var" 2 388 "int8" `308 
v L "bit" 2 388 "int8" `309 
f B "bit_test" 2 388 "int8(int8 var,int8 bit)" `307 
v L "var" 2 389 "int16" `308 
v L "bit" 2 389 "int8" `312 
f G "bit_test" 2 389 "int8(int16 var,int8 bit)" `310 
v L "var" 2 390 "int32" `308 
v L "bit" 2 390 "int8" `315 
f G "bit_test" 2 390 "int8(int32 var,int8 bit)" `313  "#use delay() Prototypes:"
v L "count" 2 393 "int8" `317 
f B "delay_cycles" 2 393 "void(int8 count)" `316 
v L "time" 2 394 "int16" `319 
f B "delay_ms" 2 394 "void(int16 time)" `318 
v L "time" 2 395 "int16" `321 
f B "delay_us" 2 395 "void(int16 time)" `320  "#use rs232() Prototypes:"
v L "cdata" 2 398 "int8" `323 
f B "putchar" 2 398 "void(int8 cdata)" `322 
v L "cdata" 2 399 "int8" `325 
v L "stream" 2 399 "int8" `326 
f G "putchar" 2 399 "void(int8 cdata,int8 stream)" `324 
v L "string" 2 400 "*int8" `328 
f B "puts" 2 400 "void(*int8 string)" `327 
v L "string" 2 401 "*int8" `330 
v L "stream" 2 401 "int8" `331 
f G "puts" 2 401 "void(*int8 string,int8 stream)" `329 
f B "getch" 2 402 "int8()" `332 
v L "stream" 2 403 "int8" `334 
f G "getch" 2 403 "int8(int8 stream)" `333 
v L "string" 2 404 "*int8" `336 
f B "gets" 2 404 "void(*int8 string)" `335 
v L "string" 2 405 "*int8" `338 
v L "stream" 2 405 "int8" `339 
f G "gets" 2 405 "void(*int8 string,int8 stream)" `337 
f B "kbhit" 2 406 "int8()" `340 
v L "stream" 2 407 "int8" `342 
f G "kbhit" 2 407 "int8(int8 stream)" `341 
v L "string" 2 408 "*int8" `344 
f B "printf" 2 408 "void(*int8 string,*int8 _VA_LIST)" `343 
v L "stream" 2 409 "int8" `347 
v L "string" 2 409 "*int8" `348 
f B "fprintf" 2 409 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `346 
f B "putc_send" 2 410 "void()" `350 
v L "stream" 2 411 "int8" `352 
f B "fputc_send" 2 411 "void(int8 stream)" `351 
f B "rcv_buffer_full" 2 412 "int8()" `353 
v L "stream" 2 413 "int8" `355 
f G "rcv_buffer_full" 2 413 "int8(int8 stream)" `354 
f B "rcv_buffer_bytes" 2 414 "int16()" `356 
v L "stream" 2 415 "int8" `358 
f G "rcv_buffer_bytes" 2 415 "int16(int8 stream)" `357 
f B "tx_buffer_full" 2 416 "int8()" `359 
v L "stream" 2 417 "int8" `361 
f G "tx_buffer_full" 2 417 "int8(int8 stream)" `360 
f B "tx_buffer_bytes" 2 418 "int16()" `362 
v L "stream" 2 419 "int8" `364 
f G "tx_buffer_bytes" 2 419 "int16(int8 stream)" `363  "#use i2c() Prototypes:"
f B "i2c_read" 2 422 "int8()" `365 
v L "stream" 2 423 "int8" `367 
f G "i2c_read" 2 423 "int8(int8 stream)" `366 
v L "stream" 2 424 "int8" `369 
v L "ack" 2 424 "int8" `370 
f G "i2c_read" 2 424 "int8(int8 stream,int8 ack)" `368 
v L "data" 2 425 "int8" `372 
f B "i2c_write" 2 425 "int8(int8 data)" `371 
v L "stream" 2 426 "int8" `374 
v L "data" 2 426 "int8" `375 
f G "i2c_write" 2 426 "int8(int8 stream,int8 data)" `373 
f B "i2c_start" 2 427 "void()" `376 
v L "stream" 2 428 "int8" `378 
f G "i2c_start" 2 428 "void(int8 stream)" `377 
v L "stream" 2 429 "int8" `380 
v L "restart" 2 429 "int8" `381 
f G "i2c_start" 2 429 "void(int8 stream,int8 restart)" `379 
f B "i2c_stop" 2 430 "void()" `382 
v L "stream" 2 431 "int8" `384 
f G "i2c_stop" 2 431 "void(int8 stream)" `383 
f B "i2c_isr_state" 2 432 "int8()" `385 
v L "addr" 2 433 "int8" `387 
f B "i2c_slaveaddr" 2 433 "void(int8 addr)" `386 
v L "stream" 2 434 "int8" `389 
v L "addr" 2 434 "int8" `390 
f G "i2c_slaveaddr" 2 434 "void(int8 stream,int8 addr)" `388 
f B "i2c_poll" 2 435 "int8()" `391 
v L "stream" 2 436 "int8" `393 
f G "i2c_poll" 2 436 "int8(int8 stream)" `392 
v L "baud" 2 437 "int32" `395 
f B "i2c_init" 2 437 "void(int32 baud)" `394 
v L "stream" 2 438 "int8" `397 
v L "baud" 2 438 "int32" `398 
f G "i2c_init" 2 438 "void(int8 stream,int32 baud)" `396  "#use spi() Prototypes:"
f B "spi_xfer" 2 441 "int8()" `399 
f G "spi_xfer" 2 442 "int16()" `400 
f G "spi_xfer" 2 443 "int32()" `401 
v L "data" 2 444 "int8" `403 
f G "spi_xfer" 2 444 "int8(int8 data)" `402 
v L "data" 2 445 "int16" `405 
f G "spi_xfer" 2 445 "int16(int16 data)" `404 
v L "data" 2 446 "int32" `407 
f G "spi_xfer" 2 446 "int32(int32 data)" `406 
v L "stream" 2 447 "int8" `409 
v L "data" 2 447 "int8" `410 
f G "spi_xfer" 2 447 "int8(int8 stream,int8 data)" `408 
v L "stream" 2 448 "int8" `409 
v L "data" 2 448 "int16" `413 
f G "spi_xfer" 2 448 "int16(int8 stream,int16 data)" `411 
v L "stream" 2 449 "int8" `409 
v L "data" 2 449 "int32" `416 
f G "spi_xfer" 2 449 "int32(int8 stream,int32 data)" `414 
v L "stream" 2 450 "int8" `418 
v L "data" 2 450 "int8" `419 
v L "bits" 2 450 "int8" `420 
f G "spi_xfer" 2 450 "int8(int8 stream,int8 data,int8 bits)" `417 
v L "stream" 2 451 "int8" `418 
v L "data" 2 451 "int16" `419 
v L "bits" 2 451 "int8" `424 
f G "spi_xfer" 2 451 "int16(int8 stream,int16 data,int8 bits)" `421 
v L "stream" 2 452 "int8" `418 
v L "data" 2 452 "int32" `419 
v L "bits" 2 452 "int8" `428 
f G "spi_xfer" 2 452 "int32(int8 stream,int32 data,int8 bits)" `425 
v L "baud" 2 453 "int32" `430 
f B "spi_init" 2 453 "void(int32 baud)" `429 
v L "stream" 2 454 "int8" `432 
v L "baud" 2 454 "int32" `433 
f G "spi_init" 2 454 "void(int8 stream,int32 baud)" `431 
v L "baud" 2 455 "int32" `435 
f B "spi_speed" 2 455 "void(int32 baud)" `434 
v L "stream" 2 456 "int8" `437 
v L "baud" 2 456 "int32" `438 
f G "spi_speed" 2 456 "void(int8 stream,int32 baud)" `436 
v L "stream" 2 457 "int8" `440 
v L "baud" 2 457 "int32" `441 
v L "clock" 2 457 "int32" `442 
f G "spi_speed" 2 457 "void(int8 stream,int32 baud,int32 clock)" `439 
v L "data" 2 458 "int8" `444 
f B "spi_prewrite" 2 458 "void(int8 data)" `443 
v L "data" 2 459 "int16" `446 
f G "spi_prewrite" 2 459 "void(int16 data)" `445 
v L "data" 2 460 "int32" `448 
f G "spi_prewrite" 2 460 "void(int32 data)" `447 
v L "??65535" 2 461 "int8" `450 
v L "data" 2 461 "int8" `451 
f G "spi_prewrite" 2 461 "void(int8 ,int8 data)" `449 
v L "??65535" 2 462 "int8" `450 
v L "data" 2 462 "int16" `454 
f G "spi_prewrite" 2 462 "void(int8 ,int16 data)" `452 
v L "??65535" 2 463 "int8" `450 
v L "data" 2 463 "int32" `457 
f G "spi_prewrite" 2 463 "void(int8 ,int32 data)" `455 
f B "spi_xfer_in" 2 464 "int8()" `458 
f G "spi_xfer_in" 2 465 "int16()" `459 
f G "spi_xfer_in" 2 466 "int32()" `460 
v L "bits" 2 467 "int8" `462 
f G "spi_xfer_in" 2 467 "int8(int8 bits)" `461 
v L "bits" 2 468 "int8" `464 
f G "spi_xfer_in" 2 468 "int16(int8 bits)" `463 
v L "bits" 2 469 "int8" `466 
f G "spi_xfer_in" 2 469 "int32(int8 bits)" `465 
v L "stream" 2 470 "int8" `468 
v L "bits" 2 470 "int8" `469 
f G "spi_xfer_in" 2 470 "int8(int8 stream,int8 bits)" `467 
v L "stream" 2 471 "int8" `468 
v L "bits" 2 471 "int8" `472 
f G "spi_xfer_in" 2 471 "int16(int8 stream,int8 bits)" `470 
v L "stream" 2 472 "int8" `468 
v L "bits" 2 472 "int8" `475 
f G "spi_xfer_in" 2 472 "int32(int8 stream,int8 bits)" `473  "#use rtos() Prototypes:"
f B "rtos_run" 2 475 "void()" `476 
f B "rtos_yield" 2 476 "void()" `477 
v L "task" 2 477 "int8" `479 
f B "rtos_enable" 2 477 "void(int8 task)" `478 
v L "task" 2 478 "int8" `481 
f B "rtos_disable" 2 478 "void(int8 task)" `480 
f B "rtos_terminate" 2 479 "void()" `482 
v L "flag" 2 480 "int8" `484 
f B "rtos_await" 2 480 "void(int8 flag)" `483 
v L "sem" 2 481 "int8" `486 
f B "rtos_wait" 2 481 "void(int8 sem)" `485 
v L "sem" 2 482 "int8" `488 
f B "rtos_signal" 2 482 "void(int8 sem)" `487 
v L "task" 2 483 "int8" `490 
v L "msg" 2 483 "int8" `491 
f B "rtos_msg_send" 2 483 "void(int8 task,int8 msg)" `489 
f B "rtos_msg_read" 2 484 "int8()" `492 
f B "rtos_msg_poll" 2 485 "int8()" `493 
v L "task" 2 486 "int8" `495 
f B "rtos_overrun" 2 486 "int8(int8 task)" `494 
v L "task" 2 487 "int8" `497 
v L "stat" 2 487 "*int8" `498 
f B "rtos_stats" 2 487 "void(int8 task,*int8 stat)" `496  "#use timer() Prototypes:"
f B "get_ticks" 2 490 "int8()" `499 
f G "get_ticks" 2 491 "int16()" `500 
f G "get_ticks" 2 492 "int32()" `501 
v L "stream" 2 493 "int8" `503 
f G "get_ticks" 2 493 "int8(int8 stream)" `502 
v L "stream" 2 494 "int8" `505 
f G "get_ticks" 2 494 "int16(int8 stream)" `504 
v L "stream" 2 495 "int8" `507 
f G "get_ticks" 2 495 "int32(int8 stream)" `506 
v L "value" 2 496 "int8" `509 
f B "set_ticks" 2 496 "void(int8 value)" `508 
v L "value" 2 497 "int16" `511 
f G "set_ticks" 2 497 "void(int16 value)" `510 
v L "value" 2 498 "int32" `513 
f G "set_ticks" 2 498 "void(int32 value)" `512 
v L "stream" 2 499 "int8" `515 
v L "value" 2 499 "int8" `516 
f G "set_ticks" 2 499 "void(int8 stream,int8 value)" `514 
v L "stream" 2 500 "int8" `515 
v L "value" 2 500 "int16" `519 
f G "set_ticks" 2 500 "void(int8 stream,int16 value)" `517 
v L "stream" 2 501 "int8" `515 
v L "value" 2 501 "int32" `522 
f G "set_ticks" 2 501 "void(int8 stream,int32 value)" `520  "#use pwm() Prototypes:"
f B "pwm_on" 2 504 "void()" `523 
v L "stream" 2 505 "int8" `525 
f G "pwm_on" 2 505 "void(int8 stream)" `524 
f B "pwm_off" 2 506 "void()" `526 
v L "stream" 2 507 "int8" `528 
f G "pwm_off" 2 507 "void(int8 stream)" `527 
v L "duty" 2 508 "int16" `530 
f B "pwm_set_duty" 2 508 "void(int16 duty)" `529 
v L "stream" 2 509 "int8" `532 
v L "duty" 2 509 "int16" `533 
f G "pwm_set_duty" 2 509 "void(int8 stream,int16 duty)" `531 
v L "percent" 2 510 "int16" `535 
f B "pwm_set_duty_percent" 2 510 "void(int16 percent)" `534 
v L "stream" 2 511 "int8" `537 
v L "percent" 2 511 "int16" `538 
f G "pwm_set_duty_percent" 2 511 "void(int8 stream,int16 percent)" `536 
v L "frequency" 2 512 "int32" `540 
f B "pwm_set_frequency" 2 512 "void(int32 frequency)" `539 
v L "stream" 2 513 "int8" `542 
v L "frequency" 2 513 "int32" `543 
f G "pwm_set_frequency" 2 513 "void(int8 stream,int32 frequency)" `541  "#use capture() Prototypes:"
f B "get_capture_time" 2 516 "int16()" `544 
v L "stream" 2 517 "int8" `546 
f G "get_capture_time" 2 517 "int16(int8 stream)" `545 
f B "get_capture_event" 2 518 "int8()" `547 
v L "stream" 2 519 "int8" `549 
f G "get_capture_event" 2 519 "int8(int8 stream)" `548  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
v L "address" 2 532 "int16" `551 
f B "goto_address" 2 532 "void(int16 address)" `550 
v L "label" 2 533 "int16" `553 
f B "label_address" 2 533 "int16(int16 label)" `552  "Program Memory Prototypes:"
v L "address" 2 536 "int16" `555 
v L "dataptr" 2 536 "*int8" `556 
v L "count" 2 536 "int16" `557 
f B "read_program_memory" 2 536 "void(int16 address,*int8 dataptr,int16 count)" `554 
v L "address" 2 537 "int16" `559 
f B "read_program_eeprom" 2 537 "int16(int16 address)" `558 
v L "address" 2 538 "int16" `561 
f B "erase_program_eeprom" 2 538 "void(int16 address)" `560 
v L "address" 2 539 "int16" `563 
v L "dataptr" 2 539 "*int8" `564 
v L "count" 2 539 "int16" `565 
f B "write_program_memory" 2 539 "void(int16 address,*int8 dataptr,int16 count)" `562 
v L "address" 2 540 "int16" `567 
v L "data" 2 540 "int16" `568 
f B "write_program_eeprom" 2 540 "void(int16 address,int16 data)" `566  "EEPROM Prototypes:"
t G "__EEADDRESS__" 2 545 "int16" `569 
v L "address" 2 550 "__EEADDRESS__" `571 
f B "read_eeprom" 2 550 "int8(__EEADDRESS__ address)" `570 
v L "address" 2 551 "__EEADDRESS__" `573 
v L "value" 2 551 "int8" `574 
f B "write_eeprom" 2 551 "void(__EEADDRESS__ address,int8 value)" `572  "INT"
c L "write_eeprom" 2 3 4 "FUNCTION"
v L "interrupt" 2 558 "int32" `576 
f B "enable_interrupts" 2 558 "void(int32 interrupt)" `575 
v L "interrupt" 2 559 "int32" `578 
f B "disable_interrupts" 2 559 "void(int32 interrupt)" `577 
v L "interrupt" 2 560 "int32" `580 
f B "clear_interrupt" 2 560 "void(int32 interrupt)" `579 
v L "interrupt" 2 561 "int32" `582 
f B "interrupt_active" 2 561 "int8(int32 interrupt)" `581 
v L "interrupt" 2 562 "int32" `584 
f B "interrupt_enabled" 2 562 "int8(int32 interrupt)" `583 
v L "source" 2 563 "int8" `586 
v L "edge" 2 563 "int8" `587 
f B "ext_int_edge" 2 563 "void(int8 source,int8 edge)" `585 
v L "address" 2 564 "int16" `589 
f B "jump_to_isr" 2 564 "void(int16 address)" `588  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 566 "0x40"
d G "H_TO_L" 2 567 "0"
d G "GLOBAL" 2 569 "0x0BC0"
d G "PERIPH" 2 570 "0x0B40"
d G "INT_RTCC" 2 571 "0x000B20"
d G "INT_RB" 2 572 "0x00FF0B08"
d G "INT_EXT_L2H" 2 573 "0x50000B10"
d G "INT_EXT_H2L" 2 574 "0x60000B10"
d G "INT_EXT" 2 575 "0x000B10"
d G "INT_AD" 2 576 "0x008C40"
d G "INT_TBE" 2 577 "0x008C10"
d G "INT_RDA" 2 578 "0x008C20"
d G "INT_TIMER1" 2 579 "0x008C01"
d G "INT_TIMER2" 2 580 "0x008C02"
d G "INT_CCP1" 2 581 "0x008C04"
d G "INT_CCP2" 2 582 "0x008D01"
d G "INT_SSP" 2 583 "0x008C08"
d G "INT_BUSCOL" 2 584 "0x008D08"
d G "INT_EEPROM" 2 585 "0x008D10"
d G "INT_TIMER0" 2 586 "0x000B20"
F G "RTCC_isr" 0 5 "void()" `594 
F G "TIMER2_isr" 0 11 "void()" `595 
F G "MAIN" 0 16 "void()" `596 
C L "MAIN" 0 17 1 "FUNCTION"
C L "MAIN" 0 17 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
